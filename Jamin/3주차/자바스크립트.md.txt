# 핵심 키워드 🎯

- JavaScript
    - ES6
- JavaScript 문법
    - 선언, 변수, 조건문, 반복문, 함수, 배열

# 실습 체크리스트✅

- **변수, 자료형**
    - [ ]  const :
    - [ ]  let :
    - [ ]  string :
    - [ ]  boolean :
    - [ ]  undefined :
    - [ ]  null :

// 변수 : 선언, 초기화, 재할당

const 변수 1 = '코딩'; // 재할당 불가능
let 변수 2 = '자바스크립트'; // 변하는 값을 넣어줄때는 가능

//변수 1 = '코딩은 어려워';
변수 2 = 'html';
// 데이터 타입, 자료형
**// 1. string 문자형**

const str = 'hello';

**// 2. number : 숫자형
// 3. bigInt : 큰값이 숫자
// 4. boolean : true, false
// 5. symbol : 중복되지 않는 고유값
// 6. null
// 7. undefined
// 8. object : 객체**

const aa = 10 % 3;
console.log(aa);

**// 2. 할당연산자 : =
// 3. 문자열 연산자 : +**
let data = 'happy' + '2022';
console.log(data);

**// 비교 연산자 : ==, ===(==보다 엄격하게 판단), !=, !==, >, <
// 논리 연산자 : &&(그리고, 모든 값이 true이여만 true이 나옴), ||(또는, 모든 값이 false여야만 false 출력), !(반대)**

- **배열**
    - [ ]  push :
    - [ ]  unshift :
    - [ ]  splice :
    - [ ]  pop :
    - [ ]  shift :

// **1. 선언**
//const a = [대전, 서울, 세종];
//const a = new Array[청주, 인천, 광주];
const a = new Array(); // 내용을 빈 칸으로 정리시킴
new Array[0] = '대전'; // 몇 번째에 들어갈지 정하는 것
console.log(a);

**// 2. index : 접근
// 3. 추가 및 삭제**

**//push : 뒤에 원소 추가**
a.push('1번', '2번');

**// unshift : 앞에 원소 추가**
a.unshift('3번');

**// splice : 원하는 지점에 추가 및 삭제**
// splice( 시작 index, 삭제하고 싶은 원소의 개수, 추가하고 싶은 원소들);

a.splice(4,0,'4번');

**// pop : 맨 뒤의 원소 하나 삭제
// shift : 맨 앞의 원소 하나 삭제
// splice : 두 번째 인자에 삭제할 원소를 넣어주면 끝!**

// splice : 이거는 추가와 삭제를 동시에 할 수 있다.

- **객체**
    - [ ]  배열과 객체의 차이 :
    - [ ]  생성자 함수 :
1. **객체 선언**

const pooh = {

name : ‘박재민’,

species : ‘인간’,

‘어렵다’ ; function(){

console.log(’으아 너무 어려워’);

}

}

1. **객체 접근 : . , []**

console.log(pooh[’species’]);

추가 : [pooh.love](http://pooh.love) = [’휴식’];

삭제 : delete pooh.love;

1. **생성자 함수 : 틀**

function character(name, species, job, gender){

[this.name](http://this.name) = name; // this 생성자 함수로 만든 인스턴스 객체?

this.species = species;

this.job = job;

this.gender = gender;

this.[’say-Hi’] = function() {

console.log(’나는’ ${this.name}, 감자다’);

}

} 

- **함수**
    - [ ]  function :
    - [ ]  arrow function :

// 변수명이나 함수 이름을 만드는데 시간이 많이 쓰인다.

function help_me (매개변수) {

const result = 매개변수 *10; // input

return result; // output, 저장이 되어야한다면 항상 써줄 것

}

// 함수 호출

const data = help_me(10); // 1번 방법 (함수를 많이 사용해주기 때문에 지정을 해줌)

console.log(data);

help_me(10); // 2번 방법

arrow function : // 최신 문법

const help_me = (매개변수) ⇒ 매개변수 *10; // 인자가 하나일때 많이 사용 + 인자가 여러개일때는 매개변수 자리에 괄호를 사용해야하고 하나 일때는 괄호를 생략해도 된다.

- **조건문**
    - [ ]  if문이 거짓으로 판단하는 값 :
    - [ ]  삼항연산자 :
    - [ ]  if, else if, else문과 switch문의 차이 :

**// if-else문**

if (조건) {

실행할 코드

} else {

실행할 코드2

} 

// 상황연산자 : 조건 ? 참일때 실행될 코드 : 거짓일때 실행될 코드

const result = age > 19 **?** ’술을 마실 수 있다 **:** ‘미성년자’;

console.log(result);

**문제**

- &&를 사용하지 않고 표현하기

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/95df042d-28fa-4e89-b5cc-2f9f060d4987/Untitled.png)

**정답**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a616b910-1a22-4f26-bafa-a0f961b23b0d/Untitled.png)

// switch문

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f4e0c18c-8011-40de-9ce1-265b7404a40a/Untitled.png)

// 만족하는 조건이 생기면 그 아래 코드까지 찍힌다. 그래서 break를 사용해야 조건문 밖으로 나간다.

- **반복문**
    - [ ]  for문과 while문을 사용하여 아래 배열의 index값들을 각 10씩 더한 반복문을 작성해주세요.
    
    ```
    const numArr = [77, 81, 12, 34, 51, 20];
    
    ```
    

**//for문**

for (초기값 ; 종료조건 ; 증감) {

실행할 코드

}

for (let i = 1 ; i<11 ; i++) {

console.log(i);

}

const nimArr = [45,32,11,98,22];

for (let i = 0; i < numArr.length ; i++) {

console.log(numArr[i])};

numArr[i] += 10;

}

**// while문**

while (조건) {

코드

증감

}

let i = 1; // i를 1로 초기화시켜줌

while (i<11) {

console.log(i);

i++;

}

let i = 1; 

while (true) {

if (i > 10) {

break;

}

i++; // 위치 바뀐거 확인 할 것!

if (i%2 ≠=0) {

continue;

}

console.log(i);

}

**// do while문 - 한번이라도 실행해보고 싶다하면 사용**

let i = 0;

do {

console.log(1);

i++;

} while (i <11)